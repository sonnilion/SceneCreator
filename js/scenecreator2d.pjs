int startx, starty, endx, endy,snapX,snapY;
int[] walls= {((-25+100)*2.5)+25,((-25+100)*2.5)+25,((25+100)*2.5)+25,((-25+100)*2.5)+25,
((25+100)*2.5)+25,((-25+100)*2.5)+25,((25+100)*2.5)+25,((25+100)*2.5)+25,((25+100)*2.5)+25,
((25+100)*2.5)+25,((-25+100)*2.5)+25,((25+100)*2.5)+25,((-25+100)*2.5)+25,
((25+100)*2.5)+25,((-25+100)*2.5)+25,((-25+100)*2.5)+25};
int numberwalls = 4;
int[] lights= {(0+100)*2.5+25,(0+100)*2.5+25};
int numberlights=1;
int selectednum;
int mdifX, mdifY;
string selected;
bool drawwall = false;
string moving;
bool insertlight = false;
size(550, 550);
int oldmX, oldmY;
var commands = [];
var curcmd = -1;
var enclosures = [];
bool first = true;

int boarder = 25,
    offset = 25;


void draw() {
    if (first) {
      checkEnclosures();
      first = false;
    }
    var pressed = document.getElementById("pressed");
    if (pressed.value == "1")
      newPage();
    else if (pressed.value == "2")
      copy2d();
    else if (pressed.value == "3")
      deleteseletected();
    else if (pressed.value == "4")
      drawWallPress();
    else if (pressed.value == "5")
      insertLightPress();
    else if (pressed.value == "6")
      zoomIn();
    else if (pressed.value == "7")
      zoomOut();
    else if (pressed.value == "8")
      viewAll();
    else if (pressed.value == "9")
      undo();
    else if (pressed.value == "10")
      redo();
    strokeWeight(1);
    int axis = -90;
    background(255);
    
    //display enclosures 
    if (enclosures) {
      for (var i = 0; i < enclosures.length; i++) {
        fill(200);
        beginShape();
        for (var j = 0; j < enclosures[i].length; j+=2) {
          vertex(enclosures[i][j],enclosures[i][j+1]);
        }
        endShape(CLOSE);
      }
    }
    
    // Creates the grid map
    fill(0);
    text("-100", 0, boarder);
    for(int i=0; i< 21; i++) {
      if (i > 0) {
        textAlign(CENTER);
        text(axis,i*offset+boarder,20);
        textAlign(LEFT);
        text(axis,0,i*offset+boarder);
        axis += 10;
      }
      if (i*offset == 250) {
        stroke(0);
      }
      line(boarder, i*offset+boarder, width-boarder, i*offset+boarder);
      line(i*offset+boarder, boarder, i*offset+boarder, height-boarder);
      stroke(150);
    }
    
    if (drawwall || insertlight) {
      cursor( "crosshair");  
      for(int i=25; i<=height-50; i+=25) {
       if (mouseX >= i && mouseX <= i+8)
          snapX = i;
       else if (mouseX > i+8 && mouseX <= i+16)
          snapX = i+12.5;
       else if (mouseX > i+16 && mouseX < i+25)
          snapX = i+25;
       
       if (mouseY >= i && mouseY <= i+8)
          snapY = i;
       else if (mouseY > i+8 && mouseY <= i+16)
          snapY = i+12.5;
       else if (mouseY > i+16 && mouseY < i+25)
          snapY = i+25;
      } 
      if (drawwall)
        fill(0);
      else 
        fill(255,255,0);
      ellipse(snapX, snapY, 5, 5);
    }
    else {
      cursor( "default"); 
    }

    //get object list from 3D scene and draw
    var objectList = getObject2dCoordinates();
    strokeWeight(1); 
    stroke(0); 
    fill(255,0,0);
    
    for (var i = 0; i < objectList.length; i++) {
      beginShape();
        vertex(get2dCoordinates(objectList[i][0][0]), get2dCoordinates(objectList[i][0][1]));
        vertex(get2dCoordinates(objectList[i][1][0]), get2dCoordinates(objectList[i][1][1]));
        vertex(get2dCoordinates(objectList[i][2][0]), get2dCoordinates(objectList[i][2][1]));
        vertex(get2dCoordinates(objectList[i][3][0]), get2dCoordinates(objectList[i][3][1]));
      endShape(CLOSE);
    }  

    
    for (int j = 0;j < numberwalls;j++) {
      strokeWeight(0); 
      stroke(0);   
      fill(0);
      temp = getWalls();   
      for (var i = 0; i < temp.length; i++) {
        var currWall = temp[i].model.getBoundingVolume().obb.getCorners();
        beginShape();
          vertex(get2dCoordinates(currWall[0][0]), get2dCoordinates(currWall[0][1]));
          vertex(get2dCoordinates(currWall[1][0]), get2dCoordinates(currWall[1][1]));
          vertex(get2dCoordinates(currWall[2][0]), get2dCoordinates(currWall[2][1]));
          vertex(get2dCoordinates(currWall[3][0]), get2dCoordinates(currWall[3][1]));
        endShape(CLOSE);
      }      
    }
    for (int k = 0;k < numberlights;k++) {
      strokeWeight(1);  
      fill(255,255,0);
      ellipse(lights[k*2], lights[k*2+1], 10, 10);
    }
    
    //change mouse for seletion 
    if  (!drawwall && !insertlight) {
      for (int k = 0;k < numberlights;k++) {
          int difX = mouseX - lights[k*2];
          int difY= mouseY - lights[k*2+1];
          if (difX < 10 && difX > -10 && difY < 10 && difY > -10) { 
          cursor("pointer");
          }
       } 
       temp = getWalls();

        var currWall = temp[0].model.getBoundingVolume().obb.getCorners();
        for (var j = 0; j < 3; j++) {
          var A = -(get2dCoordinates(currWall[j+1][1]) - get2dCoordinates(currWall[j][1]));
          var B = get2dCoordinates(currWall[j+1][0])  - get2dCoordinates(currWall[j][0]);
          var C = -(A * get2dCoordinates(currWall[j][0]) + B * get2dCoordinates(currWall[j][1]));
          var D = A * mouseX + B * mouseY + C;
          document.getElementById('testingg').innerHTML = D;
          if (D == 0) {
            cursor("pointer");
          }
        }
      
       
       /*
        for (int j = 0;j < numberwalls;j++) {    
          if (walls[j*4+2] == walls[j*4]) {
            if (walls[j*4+3]-walls[j*4+1] > 0) {
              for (i = 0; i < walls[j*4+3] - walls[j*4+1]; i++) {
                int sdifX = mouseX - (walls[j*4]);
                int sdifY= mouseY - (walls[j*4+1]+i);
                if (sdifX < 3 && sdifX > -3 && sdifY < 3 && sdifY > -3)
                  cursor("pointer");
              }
            }
            else if (walls[j*4+3]-walls[j*4+1] < 0) {
              for (i = 0; i < walls[j*4+1]- walls[j*4+3]; i++) {
                int sdifX = mouseX - (walls[j*4+2]);
                int sdifY= mouseY - (walls[j*4+3]+i);
                if (sdifX < 3 && sdifX > -3 && sdifY < 3 && sdifY > -3)
                  cursor("pointer");
              }
            }
          }
          else if (walls[j*4+2] - walls[j*4] > 0) {
            var slope =(walls[j*4+3] - walls[j*4+1])/(walls[j*4+2] - walls[j*4]);  
            for (i = 0; i < walls[j*4+2]-walls[j*4]; i++) {
              int sdifX = mouseX - (walls[j*4]+ i);
              int sdifY= mouseY - (walls[j*4+1]+ (slope*i));
              if (sdifX < 3 && sdifX > -3 && sdifY < 3 && sdifY > -3)
                cursor("pointer");
            }
          }
          else if (walls[j*4+2] - walls[j*4] < 0) {
            var slope =(walls[j*4+1]-walls[j*4+3])/(walls[j*4]- walls[j*4+2]);
            for (i = 0; i < walls[j*4] - walls[j*4+2]; i++) {
              int sdifX = mouseX - (walls[j*4+2]+ i);
              int sdifY= mouseY - (walls[j*4+3]+ (slope*i));
              if (sdifX < 3 && sdifX > -3 && sdifY < 3 && sdifY > -3)
                cursor("pointer");
            }
          }
          int difX = mouseX - walls[j*4];
          int difY= mouseY - walls[j*4+1];
          int difX2 = mouseX - walls[j*4+2];
          int difY2= mouseY - walls[j*4+3];
          fill(255);
          if (difX < 10 && difX > -10 && difY < 10 && difY > -10) { 
            ellipse(walls[j*4], walls[j*4+1], 5, 5);
            cursor("pointer");
          }
          else if (difX2 < 10 && difX2 > -10 && difY2 < 10 && difY2 > -10) { 
            cursor("pointer");
            ellipse(walls[j*4+2], walls[j*4+3], 5, 5);
          }
        }*/
    } 
  
}

void mousePressed() {
  if (drawwall== true) {
    startx = snapX;
    starty = snapY;
  }    
  else if (!drawwall && !insertlight) {
    for (int k = 0;k < numberlights;k++) {
      int difX = mouseX - lights[k*2];
      int difY= mouseY - lights[k*2+1];
      if (difX < 10 && difX > -10 && difY < 10 && difY > -10) { 
      selectednum =k;
      selected = "light";
      }
    }
    for (int j = 0;j < numberwalls;j++) { 
        //select wall line 
        if (walls[j*4+2] == walls[j*4]) {
          if (walls[j*4+3]-walls[j*4+1] > 0) {
            for (i = 0; i < walls[j*4+3] - walls[j*4+1]; i++) {
              int sdifX = mouseX - (walls[j*4]);
              int sdifY= mouseY - (walls[j*4+1]+i);
              if (sdifX < 3 && sdifX > -3 && sdifY < 3 && sdifY > -3) {
                selectednum =j;
                selected = "wall";
                oldmX = mouseX;
                oldmY = mouseY;
              }
            }
          }
          else if (walls[j*4+3]-walls[j*4+1] < 0) {
            for (i = 0; i < walls[j*4+1]- walls[j*4+3]; i++) {
              int sdifX = mouseX - (walls[j*4+2]);
              int sdifY= mouseY - (walls[j*4+3]+i);
              if (sdifX < 3 && sdifX > -3 && sdifY < 3 && sdifY > -3) {
                selectednum =j;
                selected = "wall";
                oldmX = mouseX;
                oldmY = mouseY;
              }
            }
          }
        }
        else if (walls[j*4+2] - walls[j*4] > 0) {
          var slope =(walls[j*4+3] - walls[j*4+1])/(walls[j*4+2] - walls[j*4]);  
          for (i = 0; i < walls[j*4+2]-walls[j*4]; i++) {
            int sdifX = mouseX - (walls[j*4]+ i);
            int sdifY= mouseY - (walls[j*4+1]+ (slope*i));
            if (sdifX < 3 && sdifX > -3 && sdifY < 3 && sdifY > -3) {
              selectednum =j;
              selected = "wall";
              oldmX = mouseX;
              oldmY = mouseY;
            }
          }
        }
        else if (walls[j*4+2] - walls[j*4] < 0) {
          var slope =(walls[j*4+1]-walls[j*4+3])/(walls[j*4]- walls[j*4+2]); 
          for (i = 0; i < walls[j*4] - walls[j*4+2]; i++) {
            int sdifX = mouseX - (walls[j*4+2]+ i);
            int sdifY= mouseY - (walls[j*4+3]+ (slope*i));
            if (sdifX < 3 && sdifX > -3 && sdifY < 3 && sdifY > -3) {
              selectednum =j;
              selected = "wall";
              oldmX = mouseX;
              oldmY = mouseY;
            }
          }
        }  
        //select wall corners     
        int difX = mouseX - walls[j*4];
        int difY= mouseY - walls[j*4+1];
        int difX2 = mouseX - walls[j*4+2];
        int difY2= mouseY - walls[j*4+3];
      if (difX < 10 && difX > -10 && difY < 10 && difY > -10) { 
        selectednum =j;
        selected = "wallcornerstart";
        oldmX = mouseX;
        oldmY = mouseY;
      }
      else if (difX2 < 10 && difX2 > -10 && difY2 < 10 && difY2 > -10) { 
        selectednum =j;
        selected = "wallcornerend";
        oldmX = mouseX;
        oldmY = mouseY;
      }
    }
  } 
}
 	
void mouseDragged() {
  if (selected == "light") {
    curcmd++;
    if (curcmd <= commands.length - 1) {
        for (var i = curcmd;i < commands.length;i++)
          commands[i] = null;
    
      }
      commands[curcmd] =new moveLightCommand();
  }
  else if (selected == "wall" || selected == "wallcornerstart" || selected == "wallcornerend") {
  curcmd++;
    if (curcmd <= commands.length - 1) {
        for (var i = curcmd;i < commands.length;i++)
          commands[i] = null;
    
      }
      commands[curcmd] =new moveWallCommand();
  }
//moving a light
  if (selected == "light" || moving == "light") {
    for(int i=25; i<=height-50; i+=25) {
      if (mouseX >= i && mouseX <= i+8)
          snapX = i;
      else if (mouseX > i+8 && mouseX <= i+16)
          snapX = i+12.5;
      else if (mouseX > i+16 && mouseX < i+25)
          snapX = i+25;
      if (mouseY >= i && mouseY <= i+8)
          snapY = i;
      else if (mouseY > i+8 && mouseY <= i+16)
          snapY = i+12.5;
      else if (mouseY > i+16 && mouseY < i+25)
          snapY = i+25;
    } 
    lights[selectednum*2] = snapX;
    lights[selectednum*2+1] = snapY; 
    moving = "light";
  }
  //moving a wallcorners
  else if (selected == "wallcornerend" || moving == "wallcornerend") {
    for(int i=25; i<=height-50; i+=25) {
      if (mouseX >= i && mouseX <= i+8)
          snapX = i;
      else if (mouseX > i+8 && mouseX <= i+16)
          snapX = i+12.5;
      else if (mouseX > i+16 && mouseX < i+25)
          snapX = i+25;
      if (mouseY >= i && mouseY <= i+8)
          snapY = i;
      else if (mouseY > i+8 && mouseY <= i+16)
          snapY = i+12.5;
      else if (mouseY > i+16 && mouseY < i+25)
          snapY = i+25;
    } 
    for (var i = 0; i < walls.length; i+=2) {
         if (walls[selectednum*4+2] ===walls[i] && walls[selectednum*4+3] === walls[i+1] && i != selectednum*4+2) {
        walls[i] = snapX;
        walls[i+1] = snapY; 
      }
    }
    walls[selectednum*4+2] = snapX;
    walls[selectednum*4+3] = snapY; 
    moving = "wallcornerend";
    checkEnclosures();
  }
  else if (selected == "wallcornerstart" || moving == "wallcornerstart") {
    for(int i=25; i<=height-50; i+=25) {
      if (mouseX >= i && mouseX <= i+8)
          snapX = i;
      else if (mouseX > i+8 && mouseX <= i+16)
          snapX = i+12.5;
      else if (mouseX > i+16 && mouseX < i+25)
          snapX = i+25;
      if (mouseY >= i && mouseY <= i+8)
          snapY = i;
      else if (mouseY > i+8 && mouseY <= i+16)
          snapY = i+12.5;
      else if (mouseY > i+16 && mouseY < i+25)
          snapY = i+25;
    }  
    for (var i = 0; i < numberwalls*4; i+=2) {
      if (walls[selectednum*4] ===walls[i] && walls[selectednum*4+1] === walls[i+1] && i != selectednum*4) {
        walls[i] = snapX;
        walls[i+1] = snapY; 
      }
    }
    walls[selectednum*4] = snapX;
    walls[selectednum*4+1] = snapY;
    moving = "wallcornerstart";
    checkEnclosures();
  }
  //moving a wall
  else if (selected == "wall" || moving == "wall") {
   //snape wall 
     for(int i=25; i<=height-50; i+=25) {
      if (mouseX >= i && mouseX <= i+8)
          snapX = i;
      else if (mouseX > i+8 && mouseX <= i+16)
          snapX = i+12.5;
      else if (mouseX > i+16 && mouseX < i+25)
          snapX = i+25;
      if (mouseY >= i && mouseY <= i+8)
          snapY = i;
      else if (mouseY > i+8 && mouseY <= i+16)
          snapY = i+12.5;
      else if (mouseY > i+16 && mouseY < i+25)
          snapY = i+25;
    } 
    mdifX = mdifX + snapX - oldmX;
    mdifY = mdifY + snapY - oldmY;
    var checkX1= walls[selectednum*4]+mdifX;
    var checkY1= walls[selectednum*4+1]+mdifY;
    var checkX2= walls[selectednum*4+2]+mdifX;
    var checkY2= walls[selectednum*4+3]+mdifY;
    
    for(int i=25; i<=height-50; i+=25) {
      if (checkX1 >= i && checkX1 <= i+8) {
       if (walls[selectednum*4] != i)
        mdifX = 0;
       walls[selectednum*4] = i;
      }
      else if (checkX1 > i+8 && checkX1 <= i+16){
        if (walls[selectednum*4] != i+12.5)
          mdifX = 0;
        walls[selectednum*4] = i+12.5;
      }
      else if (checkX1 > i+16 && checkX1 < i+25){
        if (walls[selectednum*4] != i+25)
          mdifX = 0;
        walls[selectednum*4] = i+25;
      }
      if (checkY1 >= i && checkY1 <= i+8){
        if (walls[selectednum*4+1] != i)
          mdifY = 0;
        walls[selectednum*4+1] = i;
      }
      else if (checkY1 > i+8 && checkY1 <= i+16){
        if (walls[selectednum*4+1] != i+12.5)
          mdifY = 0;
        walls[selectednum*4+1] = i+12.5;
      }
      else if (checkY1 > i+16 && checkY1 < i+25){
        if (walls[selectednum*4+1] != i+25)
          mdifY = 0;
        walls[selectednum*4+1] = i+25;
      }
    } 
    for(int i=25; i<=height-50; i+=25) {
      if (checkX2 >= i && checkX2 <= i+8)
          walls[selectednum*4+2] = i;
      else if (checkX2 > i+8 && checkX2 <= i+16)
          walls[selectednum*4+2] = i+12.5;
      else if (checkX2 > i+16 && checkX2 < i+25)
          walls[selectednum*4+2] = i+25;
      if (checkY2 >= i && checkY2 <= i+8)
          walls[selectednum*4+3] = i;
      else if (checkY2 > i+8 && checkY2 <= i+16)
          walls[selectednum*4+3] = i+12.5;
      else if (checkY2 > i+16 && checkY2 < i+25)
          walls[selectednum*4+3] = i+25;
    } 
    for(int i=25; i<=height-50; i+=25) {
      if (mouseX >= i && mouseX <= i+8)
          snapX = i;
      else if (mouseX > i+8 && mouseX <= i+16)
          snapX = i+12.5;
      else if (mouseX > i+16 && mouseX < i+25)
          snapX = i+25;
      if (mouseY >= i && mouseY <= i+8)
          snapY = i;
      else if (mouseY > i+8 && mouseY <= i+16)
          snapY = i+12.5;
      else if (mouseY > i+16 && mouseY < i+25)
          snapY = i+25;
    } 
    oldmX = snapX;
    oldmY = snapY;
    moving =  "wall";
    checkEnclosures();
  }
  selected = "";
}
void mouseClicked() {
  if (insertlight && numberlights<8) {
    curcmd++;
    if (curcmd <= commands.length - 1) {
      for (var i = curcmd;i < commands.length;i++)
        commands[i] = null;
  
    }
    commands[curcmd] =new createLightCommand(snapX, snapY);
    commands[curcmd].execute();
  }   
  else if (numberlights==8)
    alert("You have reached the limit of lights for a design layout");
}

void mouseReleased() {
  if (drawwall) {
    endx = snapX;
    endy = snapY;
    curcmd++;
    if (curcmd <= commands.length - 1) {
      for (var i = curcmd;i < commands.length;i++)
        commands[i] = null;
  
    }
    commands[curcmd] =new createWallCommand(startx, starty, endx, endy);
    commands[curcmd].execute();
  }  
  if (moving == "light")
    commands[curcmd].execute();
  else if (moving == "wall" || moving == "wallcornerstart" || moving == "wallcornerend")
    commands[curcmd].execute();
  moving =  ""
}
void newPage() {
  curcmd++;
  if (curcmd <= commands.length - 1) {
    for (var i = curcmd;i < commands.length;i++)
      commands[i] = null;

  }
  commands[curcmd] =new newPageCommand();
  commands[curcmd].execute();
  var pressed = document.getElementById("pressed");
  pressed.value = "0";
}
void copy2d() {
  var pressed = document.getElementById("pressed");
  pressed.value = "0";
}
void deleteseletected() {
  curcmd++;
  if (curcmd <= commands.length - 1) {
    for (var i = curcmd;i < commands.length;i++)
      commands[i] = null;

  }
  commands[curcmd] =new deleteSelectedCommand();
  commands[curcmd].execute();
  var pressed = document.getElementById("pressed");
  pressed.value = "0";
}
void drawWallPress() {     
  drawwall =  (drawwall)? false : true;;
  insertlight = false;
  var pressed = document.getElementById("pressed");
  pressed.value = "0";
}
void insertLightPress() {
  insertlight = (insertlight)? false : true;
  drawwall = false;
  var pressed = document.getElementById("pressed");
  pressed.value = "0";
}
void zoomIn() {
  var pressed = document.getElementById("pressed"); 
  pressed.value = "0";
}
void zoomOut() {
  var pressed = document.getElementById("pressed");
  pressed.value = "0";
}
void viewall() {
  var pressed = document.getElementById("pressed");
  pressed.value = "0";
}
void undo() {
  if (curcmd >= 0) {
    commands[curcmd--].unexecute();
  }
  var pressed = document.getElementById("pressed");
  pressed.value = "0";
  checkEnclosures();
}
void redo() {
  if (commands[curcmd+1]) {
    commands[++curcmd].execute();
  }
  var pressed = document.getElementById("pressed");
  pressed.value = "0";
  checkEnclosures();
}
var Command = function() {
  this.execute = function() {};
  this.unexecute = function() {}; 
};

//delete Command
var deleteSelectedCommand = function deleteSelectedCommand() {
  Command.call();
  this.walls = [];
  this.lights = [];
    for (int j = 0;j < numberwalls;j++) {
        this.walls[j*4]= walls[j*4];
        this.walls[j*4+1]= walls[j*4+1];
        this.walls[j*4+2]= walls[j*4+2];
        this.walls[j*4+3]= walls[j*4+3];
    }
    for (int k = 0;k < numberlights;k++) {
        this.lights[k*2] = lights[k*2];
        this.lights[k*2+1] = lights[k*2+1];
    }
  this.selectednum = selectednum;
  this.selected = selected
  this.execute = function() {
    if (this.selected == "light") {
      for (int k = this.selectednum;k < numberlights-1;k++) {
        lights[k*2] = lights[k*2+2];
        lights[k*2+1] = lights[k*2+3];
      }
      deleteLight(this.selectednum);
      numberlights--;
    }
    else if (this.selected == "wall") {
      for (int j = this.selectednum;j < numberwalls-1;j++) {
        walls[j*4]= walls[j*4+4];
        walls[j*4+1]= walls[j*4+5];
        walls[j*4+2]= walls[j*4+6];
        walls[j*4+3]= walls[j*4+7];
      }
      deleteWall(this.selectednum);
      numberwalls--;
    }
    checkEnclosures();
    selectednum=null;
    selected = "";
  };
  this.unexecute = function() {
    if (this.selected === "wall" || this.selected === "wallcornerstart" || this.selected === "wallcornerend") {
      numberwalls++; 
      for (int j = 0;j < numberwalls-1;j++)
        deleteWall(j);
      for (int j = 0;j < numberwalls;j++) {
        walls[j*4]= this.walls[j*4];
        walls[j*4+1]= this.walls[j*4+1];
        walls[j*4+2]= this.walls[j*4+2];
        walls[j*4+3]= this.walls[j*4+3];
        createWall([(walls[j*4]-25)/2.5-100,0,(walls[j*4+1]-25)/2.5-100], [(walls[j*4+2]-25)/2.5-100, 0, (walls[j*4+3]-25)/2.5-100]); 
      }
      
    }
    else if (this.selected == "light") { 
      numberlights++;
      for (int k = 0;k < numberlights-1;k++)
          deleteLight(k);
      for (int k = 0;k < numberlights;k++) {
        lights[k*2] = this.lights[k*2];
        lights[k*2+1] = this.lights[k*2+1];
        createLight(k, (lights[k*2]-25)/2.5-100,(lights[k*2+1]-25)/2.5-100);
      }
    }
    checkEnclosures();
    selectednum = this.selectednum;
    selected = this.selected
  };
};

//new page Command
var newPageCommand = function newPageCommand() {
  Command.call();
  this.deleteSceneC = new deleteSceneCommand();
  this.numberwalls = numberwalls;
  this.numberlights = numberlights;
  this.execute = function() {
    numberwalls=0;
    numberlights=0;
    this.deleteSceneC.execute();
    checkEnclosures();
  };
  this.unexecute = function() {
    numberwalls=this.numberwalls;
    numberlights=this.numberlights;
    this.deleteSceneC.unexecute();
    checkEnclosures();
  };
};

//create wall Command
var createWallCommand = function createWallCommand(startx, starty, endx, endy) {
  Command.call();
  this.startx = startx;
  this.starty = starty;
  this.endx = endx;
  this.endy = endy;
  this.walls = [];
  for (int j = 0;j < numberwalls;j++) {
   this.walls[j*4]= walls[j*4];
   this.walls[j*4+1]= walls[j*4+1];
   this.walls[j*4+2]= walls[j*4+2];
   this.walls[j*4+3]= walls[j*4+3];
  }
  this.execute = function() {
    createWall([(this.startx-25)/2.5-100,0,(this.starty-25)/2.5-100], [(this.endx-25)/2.5-100, 0, (this.endy-25)/2.5-100]); 
    walls[numberwalls*4]=this.startx;  
    walls[numberwalls*4+1]=this.starty; 
    walls[numberwalls*4+2]=this.endx; 
    walls[numberwalls*4+3]=this.endy;
    numberwalls++;
    checkEnclosures();
  };
  this.unexecute = function() {
    deleteWall(numberwalls-1);
    numberwalls--;
    for (int j = 0;j < numberwalls;j++) {
      walls[j*4]= this.walls[j*4];
      walls[j*4+1]= this.walls[j*4+1];
      walls[j*4+2]= this.walls[j*4+2];
      walls[j*4+3]= this.walls[j*4+3];
    }
    checkEnclosures();
  };
};

//create light Command
var createLightCommand = function createLightCommand(snapX, snapY) {
  Command.call();
  this.snapX = snapX;
  this.snapY = snapY;
  this.lights = [];
  for (int k = 0;k < numberlights;k++) {
    this.lights[k*2] = lights[k*2];
    this.lights[k*2+1] = lights[k*2+1];
  }
  this.execute = function() {
     createLight((this.snapX-25)/2.5-100,(this.snapY-25)/2.5-100);
     lights[numberlights*2] = this.snapX;
     lights[numberlights*2+1] = this.snapY;
     numberlights++;
  };
  this.unexecute = function() {
    deleteLight(numberlights-1);
    numberlights--;
    for (int k = 0;k < numberlights;k++) {
      lights[k*2] = this.lights[k*2];
      lights[k*2+1] = this.lights[k*2+1];
    }
  };
};

//move wall Command
var moveWallCommand = function moveWallCommand() {
  Command.call();
  this.newWalls=[];
  this.walls = [];
  var firstflag = true;
  for (int j = 0;j < numberwalls;j++) {
   this.walls[j*4]= walls[j*4];
   this.walls[j*4+1]= walls[j*4+1];
   this.walls[j*4+2]= walls[j*4+2];
   this.walls[j*4+3]= walls[j*4+3];
  }
  this.execute = function() {
   if (firstflag) {
     for (int j = 0;j < numberwalls;j++) {
       this.newWalls[j*4]= walls[j*4];
       this.newWalls[j*4+1]= walls[j*4+1];
       this.newWalls[j*4+2]= walls[j*4+2];
       this.newWalls[j*4+3]= walls[j*4+3];
     }
     firstflag = false;
   }
   for (int j = 0;j < numberwalls;j++) {
    walls[j*4]= this.newWalls[j*4];
    walls[j*4+1]= this.newWalls[j*4+1];
    walls[j*4+2]= this.newWalls[j*4+2];
    walls[j*4+3]= this.newWalls[j*4+3];
    moveWall(j,[(walls[j*4]-25)/2.5-100,0,(walls[j*4+1]-25)/2.5-100], [(walls[j*4+2]-25)/2.5-100, 0, (walls[j*4+3]-25)/2.5-100]);
   }
  };
  this.unexecute = function() {
    for (int j = 0;j < numberwalls;j++) {
      walls[j*4]= this.walls[j*4];
      walls[j*4+1]= this.walls[j*4+1];
      walls[j*4+2]= this.walls[j*4+2];
      walls[j*4+3]= this.walls[j*4+3];
      moveWall(j,[(walls[j*4]-25)/2.5-100,0,(walls[j*4+1]-25)/2.5-100], [(walls[j*4+2]-25)/2.5-100, 0, (walls[j*4+3]-25)/2.5-100]);
    }
  };
};

//move Light Command
var moveLightCommand = function moveLightCommand() {
  Command.call();
  this.newLights = [];
  var firstflag = true;
  this.lights = [];
  for (int k = 0;k < numberlights;k++) {
    this.lights[k*2] = lights[k*2];
    this.lights[k*2+1] = lights[k*2+1];
  }
  this.execute = function() {
    if (firstflag) {
      for (int k = 0;k < numberlights;k++) {
        this.newLights[k*2] = lights[k*2];
        this.newLights[k*2+1] = lights[k*2+1];
      }
      firstflag = false;
    }
    for (int k = 0;k < numberlights;k++) {
      lights[k*2] = this.newLights[k*2];
      lights[k*2+1] = this.newLights[k*2+1];
      moveLight(k, (lights[k*2]-25)/2.5-100,(lights[k*2+1]-25)/2.5-100);
    }
  };
  this.unexecute = function() {
    for (int k = 0;k < numberlights;k++) {
      lights[k*2] = this.lights[k*2];
      lights[k*2+1] = this.lights[k*2+1];
      moveLight(k, (lights[k*2]-25)/2.5-100,(lights[k*2+1]-25)/2.5-100);
    }
  };
};

void getVars () {
  var allVars= [];
  allVars.push(walls);
  allVars.push(numberwalls);
  allVars.push(lights);
  allVars.push(numberlights);
  return allVars;
}

void setVars (allVars) {
  walls = allVars[0];
  numberwalls= allVars[1];
  lights= allVars[2];
  numberlights= allVars[3];
  selectednum =null;
  selected = "";
  drawwall = false;
  moving = "";
  insertlight = false;
  commands = [];
  curcmd = -1;
}
void setEnclosures (newEnclosures) {
  enclosures = newEnclosures;
}

void get2dWalls () {
var usedWalls = [];
    for (int j = 0;j < numberwalls;j++) {
      usedWalls[j*4]= walls[j*4];
      usedWalls[j*4+1]= walls[j*4+1];
      usedWalls[j*4+2]= walls[j*4+2];
      usedWalls[j*4+3]= walls[j*4+3];
    }
  return usedWalls;
}


void get2dCoordinates (coordinates) {
  coordinates = parseFloat(coordinates);
  return (coordinates +100)*2.5+25;
}

void get3dCoordinates (coordinates) {
  coordinates = parseFloat(coordinates);
  return (coordinates-25)/2.5-100;
}