var startx, 
    starty, 
    endx, 
    endy,
    snapX,
    snapY,
    selectednum,
    mdifX, mdifY
    walls,
    selected,
    drawwall = false,
    moving,
    insertlight = false,
    oldmX, 
    oldmY,
    commands = [],
    curcmd = -1,
    enclosures = [],
    boarder = 25,
    offset = 25;

size(550, 550);

void draw() {
  background(255);
  
  //display enclosures 
  if (enclosures) {
    strokeWeight(1);
    fill(200);
    for (var i = 0; i < enclosures.length; i++) {
      beginShape();
      for (var j = 0; j < enclosures[i].length; j+=2) {
        vertex(enclosures[i][j],enclosures[i][j+1]);
      }
      endShape(CLOSE);
    }
  }
  
  // Creates the grid map
  fill(0);
  text("-100", 0, boarder);
  var axis = -90;
  for(var i=0; i< 21; i++) {
    if (i > 0) {
      textAlign(CENTER);
      text(axis,i*offset+boarder,20);
      textAlign(LEFT);
      text(axis,0,i*offset+boarder);
      axis += 10;
    }
    if (i*offset == 250) {
      stroke(0);
    }
    line(boarder, i*offset+boarder, width-boarder, i*offset+boarder);
    line(i*offset+boarder, boarder, i*offset+boarder, height-boarder);
    stroke(150);
  }
    
  //Check to see if use is drawing walls
  if (drawwall) {
    cursor( "crosshair");  
    for(var i=1; i<21; i++) {
      if (mouseX >= i*offset && mouseX <= i*offset+offset*0.33) {
        snapX = i*offset;
      }
      else if (mouseX > i*offset+offset*0.33 && mouseX <= i*offset+offset*0.66) {
        snapX = i*offset+offset*0.5;
      }
      else if (mouseX > i*offset+offset*0.66 && mouseX < i*offset+offset*0.99) {
        snapX = i*offset+offset;
      }
      if (mouseY >= i*offset && mouseY <= i*offset+offset*0.33) {
        snapY = i*offset;
      }
      else if (mouseY > i*offset+offset*0.33 && mouseY <= i*offset+offset*0.66) {
        snapY = i*offset+offset*0.5;
      }
      else if (mouseY > i*offset+offset*0.66 && mouseY < i*offset+offset*0.99) {
        snapY = i*offset+offset;
      }
    } 
    fill(0);
    ellipse(snapX, snapY, 5, 5);
  }
  else {
    cursor( "default"); 
  }

  //get object list from 3D scene and draw
  var objectList = getObjectList();
  strokeWeight(1); 
  stroke(0);     
  for (var i = 0; i < objectList.length; i++) {
    if (objectList[i].light) {
      fill(255,255,0);
    }
    else {
      fill(255,0,0);
    }
    currObject = objectList[i].model.getBoundingVolume().aabb.getCorners();
    beginShape();
      vertex(get2dCoordinates(currObject[0][0]), get2dCoordinates(currObject[0][1]));
      vertex(get2dCoordinates(currObject[1][0]), get2dCoordinates(currObject[1][1]));
      vertex(get2dCoordinates(currObject[2][0]), get2dCoordinates(currObject[2][1]));
      vertex(get2dCoordinates(currObject[3][0]), get2dCoordinates(currObject[3][1]));
    endShape(CLOSE);
  }  
  
  strokeWeight(0); 
  stroke(0);   
  fill(0);
  walls = getWalls();
  for (var i = 0; i < walls.length; i++) {
    var currWall = walls[i].model.getBoundingVolume().obb.getCorners();
    beginShape();
      vertex(get2dCoordinates(currWall[0][0]), get2dCoordinates(currWall[0][1]));
      vertex(get2dCoordinates(currWall[1][0]), get2dCoordinates(currWall[1][1]));
      vertex(get2dCoordinates(currWall[2][0]), get2dCoordinates(currWall[2][1]));
      vertex(get2dCoordinates(currWall[3][0]), get2dCoordinates(currWall[3][1]));
    endShape(CLOSE);       
  }

  //change mouse for seletion 
  if  (!drawwall) {
    for (var i = 0;i < walls.length ;i++) {
      var currWall = walls[i].model;    
      var origin = [get3dCoordinates(mouseX),100,get3dCoordinates(mouseY)];
      var dir = [0,-1,0];
      if (c3dl.rayIntersectsSphere(origin, dir, currWall.boundingVolume.getPosition(), currWall.boundingVolume.getRadius()) && 
          c3dl.rayAABBIntersect(origin, dir, currWall.boundingVolume.aabb.maxMins) &&
          c3dl.rayOBBIntersect(origin, dir, currWall.boundingVolume.obb.boxVerts, currWall.boundingVolume.getAxis())) {
        cursor("pointer");
      }
    }
  } 
}

void mousePressed() {
  if (drawwall== true) {
    startx = snapX;
    starty = snapY;
  }    
  else if (!drawwall) {
    walls = getWalls();
    //change mouse for seletion 
    if  (!drawwall) {
      for (var i = 0;i < walls.length ;i++) {
        var currWall = walls[i];    
        var origin = [get3dCoordinates(mouseX),100,get3dCoordinates(mouseY)];
        var dir = [0,-1,0];
        //check to see if a wall is selected
        if (c3dl.rayIntersectsSphere(origin, dir, currWall.model.boundingVolume.getPosition(), currWall.model.boundingVolume.getRadius()) && 
            c3dl.rayAABBIntersect(origin, dir, currWall.model.boundingVolume.aabb.maxMins) &&
            c3dl.rayOBBIntersect(origin, dir, currWall.model.boundingVolume.obb.boxVerts, currWall.model.boundingVolume.getAxis())) { 
          
          //check if the wall corners is selected  
          var difX = get3dCoordinates(mouseX) - currWall.startPoint[0];
          var difY= get3dCoordinates(mouseY) - currWall.startPoint[2];
          var difX2 = get3dCoordinates(mouseX) - currWall.endPoint[0];
          var difY2= get3dCoordinates(mouseY) - currWall.endPoint[2];
          if (difX < 10 && difX > -10 && difY < 10 && difY > -10) { 
            selectednum =i;
            selected = "wallcornerstart";
            oldmX = mouseX;
            oldmY = mouseY;
          }
          else if (difX2 < 10 && difX2 > -10 && difY2 < 10 && difY2 > -10) { 
            selectednum =i;
            selected = "wallcornerend";
            oldmX = mouseX;
            oldmY = mouseY;
          }
          else {
            selectednum =i;
            selected = "wall";
            oldmX = mouseX;
            oldmY = mouseY;
          }
        }
      }
    } 
  } 
}
 	
void mouseDragged() {
  if (selected == "wall" || selected == "wallcornerstart" || selected == "wallcornerend") {
    walls = getWalls();
    curcmd++;
    commands = commands.slice(0,curcmd);
    commands[curcmd] = new moveWallCommand();
  }
  
  for(var i=1; i<21; i++) {
    if (mouseX >= i*offset && mouseX <= i*offset+offset*0.33) {
      snapX = i*offset;
    }
    else if (mouseX > i*offset+offset*0.33 && mouseX <= i*offset+offset*0.66) {
      snapX = i*offset+offset*0.5;
    }
    else if (mouseX > i*offset+offset*0.66 && mouseX < i*offset+offset*0.99) {
      snapX = i*offset+offset;
    }
    if (mouseY >= i*offset && mouseY <= i*offset+offset*0.33) {
      snapY = i*offset;
    }
    else if (mouseY > i*offset+offset*0.33 && mouseY <= i*offset+offset*0.66) {
      snapY = i*offset+offset*0.5;
    }
    else if (mouseY > i*offset+offset*0.66 && mouseY < i*offset+offset*0.99) {
      snapY = i*offset+offset;
    }
  } 
  
  //moving a wallcorners
  if (selected == "wallcornerend" || moving == "wallcornerend") {
    //moves all wall with same corner position
    for (var i = 0; i < walls.length; i++) { 
      if (i != selectednum && walls[selectednum].endPoint[0] == walls[i].startPoint[0] && walls[selectednum].endPoint[1] == walls[i].startPoint[1] && walls[selectednum].endPoint[2] == walls[i].startPoint[2]) {
        moveWall(i,[get3dCoordinates(snapX),0,get3dCoordinates(snapY)], walls[i].endPoint);
      }
      else if (i != selectednum && walls[selectednum].endPoint[0] == walls[i].endPoint[0] && walls[selectednum].endPoint[1] == walls[i].endPoint[1] && walls[selectednum].endPoint[2] == walls[i].endPoint[2]) {
        moveWall(i, walls[i].startPoint, [get3dCoordinates(snapX),0,get3dCoordinates(snapY)]);
      }
    }
    moving = "wallcornerend";
    moveWall(selectednum, walls[selectednum].startPoint, [get3dCoordinates(snapX),0,get3dCoordinates(snapY)]);
  }
  
  else if (selected == "wallcornerstart" || moving == "wallcornerstart") {
    //moves all wall with same corner position
    for (var i = 0; i < walls.length; i++) { 
      if (i != selectednum && walls[selectednum].startPoint[0] == walls[i].startPoint[0] && walls[selectednum].startPoint[1] == walls[i].startPoint[1] && walls[selectednum].startPoint[2] == walls[i].startPoint[2]) {
        moveWall(i,[get3dCoordinates(snapX),0,get3dCoordinates(snapY)], walls[i].endPoint);
      }
      else if (i != selectednum && walls[selectednum].startPoint[0] == walls[i].endPoint[0] && walls[selectednum].startPoint[1] == walls[i].endPoint[1] && walls[selectednum].startPoint[2] == walls[i].endPoint[2]) {
        moveWall(i, walls[i].startPoint, [get3dCoordinates(snapX),0,get3dCoordinates(snapY)]);
      }
    }
    moving = "wallcornerstart";
    moveWall(selectednum,[get3dCoordinates(snapX),0,get3dCoordinates(snapY)], walls[selectednum].endPoint);
  }
  
  //moving a wall
  else if (selected == "wall" || moving == "wall") {
    for(var i=1; i<21; i++) {
      if (oldmX >= i*offset && oldmX <= i*offset+offset*0.33) {
        oldmX = i*offset;
      }
      else if (oldmX > i*offset+offset*0.33 && oldmX <= i*offset+offset*0.66) {
        oldmX = i*offset+offset*0.5;
      }
      else if (oldmX > i*offset+offset*0.66 && oldmX < i*offset+offset*0.99) {
        oldmX = i*offset+offset;
      }
      if (oldmY >= i*offset && oldmY <= i*offset+offset*0.33) {
        oldmY = i*offset;
      }
      else if (oldmY > i*offset+offset*0.33 && oldmY <= i*offset+offset*0.66) {
        oldmY = i*offset+offset*0.5;
      }
      else if (oldmY > i*offset+offset*0.66 && oldmY < i*offset+offset*0.99) {
        oldmY = i*offset+offset;
      }
    } 
    
    mdifX = snapX - oldmX;
    mdifY = snapY - oldmY;
     
    var checkX1= get2dCoordinates(walls[selectednum].startPoint[0])+mdifX;
    var checkY1= get2dCoordinates(walls[selectednum].startPoint[2])+mdifY;
    var checkX2= get2dCoordinates(walls[selectednum].endPoint[0])+mdifX;
    var checkY2= get2dCoordinates(walls[selectednum].endPoint[2])+mdifY;
    
    if (checkX1 >= boarder && checkX1 <= 525 && checkX2 >= boarder && checkX2 <= 525 && checkY1 >= boarder && checkY1 <= 525 && checkY2 >= boarder && checkY2 <= 525) {
      oldmX = snapX;
      oldmY = snapY;
      moving =  "wall";
      moveWall(selectednum,[get3dCoordinates(checkX1),0,get3dCoordinates(checkY1)], [get3dCoordinates(checkX2),0,get3dCoordinates(checkY2)]);
    }
  }
  selected = "";
}

void mouseReleased() {
  if (drawwall) {
    endx = snapX;
    endy = snapY;
    curcmd++;
    commands = commands.slice(0,curcmd);
    commands[curcmd] =new createWallCommand(startx, starty, endx, endy);
    commands[curcmd].execute();
  }  
  if (moving == "wall" || moving == "wallcornerstart" || moving == "wallcornerend") {
    commands[curcmd].execute();
  }
  moving =  ""
}

void newPage() {
  curcmd++;
  commands = commands.slice(0,curcmd);
  commands[curcmd] =new newPageCommand();
  commands[curcmd].execute();
}

void deleteSeletected() {
  curcmd++;
  commands = commands.slice(0,curcmd);
  commands[curcmd] =new deleteSelectedCommand();
  commands[curcmd].execute();
}

void drawWallPress() {     
  drawwall =  (drawwall)? false : true;
}

void undo() {
  if (curcmd >= 0) {
    commands[curcmd--].unexecute();
  }
}

void redo() {
  if (commands[curcmd+1]) {
    commands[++curcmd].execute();
  }
}

var Command = function() {
  this.execute = function() {};
  this.unexecute = function() {}; 
};

//delete Command
var deleteSelectedCommand = function deleteSelectedCommand() {
  Command.call();
  this.walls = getWalls();
  this.selectednum = selectednum;
  this.execute = function() {
    deleteWall(this.selectednum);
  };
  this.unexecute = function() {
    setWalls(this.walls);
  };
};

//new page Command
var newPageCommand = function newPageCommand() {
  Command.call();
  this.deleteSceneC = new deleteSceneCommand();
  this.execute = function() {
    this.deleteSceneC.execute();
  };
  this.unexecute = function() {
    this.deleteSceneC.unexecute();
  };
};

//create wall Command
var createWallCommand = function createWallCommand(startx, starty, endx, endy) {
  Command.call();
  this.startx = startx;
  this.starty = starty; 
  this.endx = endx; 
  this.endy = endy;
  this.execute = function() {
    this.curWall = createWall([get3dCoordinates(this.startx),0,get3dCoordinates(this.starty)], [get3dCoordinates(this.endx), 0, get3dCoordinates(this.endy)]);
  };
  this.unexecute = function() {
    deleteWall(this.curWall);
    walls = getWalls();
  };
};

//move wall Command
var moveWallCommand = function moveWallCommand() {
  Command.call();
  this.walls = getWalls();
  this.startPoints = [];
  this.endPoints = [];
  this.newStartPoints = [];
  this.newEndPoints = [];
  for (var i = 0; i < this.walls.length; i++) { 
    this.startPoints[i] = this.walls[i].startPoint;
    this.endPoints[i] = this.walls[i].endPoint;
  }
  this.execute = function() {
    if (!this.newStartPoints[0]) {
      for (var i = 0; i < this.walls.length; i++) { 
        this.newStartPoints[i] = this.walls[i].startPoint;
        this.newEndPoints[i] = this.walls[i].endPoint;
      }
    }
    else {
      for (var i = 0; i < this.walls.length; i++) { 
        moveWall(i, [this.newStartPoints[i][0],0,this.newStartPoints[i][2]], [this.newEndPoints[i][0], 0, this.newEndPoints[i][2]])
      }
    }
  };
  this.unexecute = function() {
    for (var i = 0; i < this.walls.length; i++) { 
      moveWall(i, [this.startPoints[i][0],0,this.startPoints[i][2]], [this.endPoints[i][0], 0, this.endPoints[i][2]])
    }
  };
};


void setEnclosures (newEnclosures) {
  enclosures = [];
  for (var i = 0; i < newEnclosures.length; i++) {
    enclosures[i] = [];
    for (var j = 0; j < newEnclosures[i].length; j++) {
      enclosures[i][j] = get2dCoordinates(newEnclosures[i][j]);
    }
  }

}

void get2dCoordinates (coordinates) {
  coordinates = parseFloat(coordinates);
  return (coordinates +100)*2.5+25;
}

void get3dCoordinates (coordinates) {
  coordinates = parseFloat(coordinates);
  return (coordinates-25)/2.5-100;
}